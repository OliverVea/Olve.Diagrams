@using Microsoft.AspNetCore.Components.Rendering
@using Olve.Diagrams.Timelines
@using Olve.Results
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager
@inject TimelineDeserializer TimelineDeserializer;
@page "/timeline"
@page "/timeline/{UrlString}"

<PageTitle>Timeline Editor</PageTitle>

<nav>
    <navsection class="jl">
        <button @onclick="Home">
            Back
        </button>
    </navsection>
    <navsection class="jc">
        <span>Timeline Editor</span>
    </navsection>
    <navsection class="jr">
        <button @onclick="ToggleSource">
            @(_showSvgCode ? "Hide Code" : "Show Code")
        </button>
        <button @onclick="Share">
            Share
        </button>
    </navsection>
</nav>

<content>
    <input-content>
        <textarea name="message" @bind="_timelineCode" @bind:event="oninput"></textarea>
    </input-content>

    <output-content>
        <output-image>
            @if ((_svgResult = ConvertToSvg(_timelineCode)).TryPickValue(out var svgRenderFragment, out var problems))
            {
                @svgRenderFragment
            }
            else
            {
                @foreach (var problem in problems)
                {
                    <span>@problem.ToBriefString()</span>
                }
            }
        </output-image>
            @if (_showSvgCode && _svgResult.TryPickValue(out svgRenderFragment))
            {
                <textarea name="message" disabled>@svgRenderFragment</textarea>
            }
    </output-content>
</content>

@code {
    private Result<RenderFragment> _svgResult;
    private const string TimelineCodeDefault = "version: 1.0\ntitle: My Timeline\nend: 2000-01-01\n---\nv 1850-07-04 Declaration\n^ 1900-01-01 Industrialization\nv 1999-12-31 Millennium Eve";

    private string _timelineCode = string.Empty;

    [Parameter] public string? UrlString { get; set; }

    private bool _showSvgCode;

    private void ToggleSource() =>
        _showSvgCode = !_showSvgCode;

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrWhiteSpace(UrlString))
        {
            try
            {
                var encodedBytes = Convert.FromBase64String(UrlString.Replace('-', '+').Replace('_', '/'));
                _timelineCode = System.Text.Encoding.UTF8.GetString(encodedBytes);
                return;
            }
            catch (FormatException e)
            {
                Console.WriteLine("Error decoding URL string. Falling back to default. Error: " + e.Message);
            }
        }

        _timelineCode = TimelineCodeDefault;
    }

    private Result<RenderFragment> ConvertToSvg(string timelineCode)
    {
        return Result.Chain(
            () => TimelineDeserializer.Deserialize(timelineCode),
            RenderTimeline);
    }

    private Result<RenderFragment> RenderTimeline(Olve.Diagrams.Timelines.Timeline timeline)
    {
        if (Result.Concat(() => timeline.Start, () => timeline.End).TryPickProblems(out var problems, out var startAndEnd))
        {
            return problems;
        }

        var (start, end) = startAndEnd;

        var totalDays = (end - start).TotalDays;

        const int svgWidth = 800;
        const int svgHeight = 400;
        const int margin = 100;
        const int lineY = 200;

        return Result.Success((RenderFragment)Fragment);

        void Fragment(RenderTreeBuilder builder)
        {
            var seq = 0;

            builder.OpenElement(seq++, "svg");
            builder.AddAttribute(seq++, "xmlns", "http://www.w3.org/2000/svg");
            builder.AddAttribute(seq++, "width", svgWidth);
            builder.AddAttribute(seq++, "height", svgHeight);

            // Timeline line
            builder.OpenElement(seq++, "line");
            builder.AddMultipleAttributes(seq++, new Dictionary<string, object>
            {
                { "x1", margin },
                { "y1", lineY },
                { "x2", svgWidth - margin },
                { "y2", lineY },
                { "stroke", "white" },
                { "stroke-width", 2 }
            });
            builder.CloseElement();

            // Entry points
            foreach (var entry in timeline.Entries)
            {
                var x = MapDate(entry.DateTime);

                // Dot
                builder.OpenElement(seq++, "circle");
                builder.AddMultipleAttributes(seq++, new Dictionary<string, object>
                {
                    { "cx", x },
                    { "cy", lineY },
                    { "r", 5 },
                    { "fill", "red" }
                });
                builder.CloseElement();
                builder.OpenElement(seq++, "text");

                var rotation = entry.Direction switch
                {
                    TimelineEntryDirection.Up => -45,
                    TimelineEntryDirection.Down => 45,
                };

                var textY = entry.Direction switch
                {
                    TimelineEntryDirection.Up => lineY - 10,
                    TimelineEntryDirection.Down => lineY + 16
                };

                var transform = $"rotate({rotation}, {x}, {textY})";

                builder.AddMultipleAttributes(seq++, new Dictionary<string, object>
                {
                    { "x", x },
                    { "y", textY },
                    { "transform", transform },
                    { "text-anchor", "start" },
                    { "font-size", "12" },
                    { "fill", "white" },
                });
                builder.AddContent(seq++, entry.Title);
                builder.CloseElement();
            }

            builder.CloseElement(); // svg
        }

        int MapDate(DateTime date)
        {
            var days = (date - start).TotalDays;
            var ratio = days / totalDays;
            return margin + (int)((svgWidth - 2 * margin) * ratio);
        }
    }

    private async System.Threading.Tasks.Task Share()
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(_timelineCode);
        var base64 = Convert.ToBase64String(bytes)
            .Replace('+', '-')
            .Replace('/', '_');
        var url = NavigationManager.BaseUri + "timeline/" + base64; 
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", url);
    }

    private void Home() => NavigationManager.NavigateTo("/");

}